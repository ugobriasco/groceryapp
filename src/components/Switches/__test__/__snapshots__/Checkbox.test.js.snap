// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`Checkbox onPress prop should trigger a function if pressed  1`] = `
<View
  accessibilityComponentType={undefined}
  accessibilityLabel={undefined}
  accessibilityTraits={undefined}
  accessible={true}
  hasTVPreferredFocus={undefined}
  hitSlop={undefined}
  isTVSelectable={true}
  nativeID={undefined}
  onLayout={undefined}
  onResponderGrant={[Function]}
  onResponderMove={[Function]}
  onResponderRelease={[Function]}
  onResponderTerminate={[Function]}
  onResponderTerminationRequest={[Function]}
  onStartShouldSetResponder={[Function]}
  style={
    Array [
      Object {
        "backgroundColor": "transparent",
      },
      Array [
        Object {
          "overflow": "hidden",
        },
        Object {
          "backgroundColor": "rgba(0,0,0,0)",
          "borderRadius": 5,
        },
      ],
    ]
  }
  testID={undefined}
  tvParallaxProperties={undefined}
>
  <View
    style={
      Array [
        Object {
          "alignItems": "center",
          "flexDirection": "row",
          "justifyContent": "flex-start",
          "padding": 8,
        },
        Object {
          "backgroundColor": "rgba(0,0,0,0)",
          "borderRadius": 5,
        },
        undefined,
      ]
    }
  >
    <Text
      accessible={true}
      allowFontScaling={false}
      disabled={false}
      ellipsizeMode="tail"
      onPress={[Function]}
      style={
        Array [
          Object {
            "color": "#777",
            "fontSize": 30,
          },
          Array [
            Object {
              "marginRight": 10,
            },
            Object {
              "marginLeft": 0,
              "marginRight": 0,
            },
          ],
          Object {
            "fontFamily": "Material Icons",
            "fontStyle": "normal",
            "fontWeight": "normal",
          },
        ]
      }
    >
      
    </Text>
  </View>
</View>
`;

exports[`Checkbox size stzling props should render an icon with the selected size 1`] = `
<View
  accessibilityComponentType={undefined}
  accessibilityLabel={undefined}
  accessibilityTraits={undefined}
  accessible={true}
  hasTVPreferredFocus={undefined}
  hitSlop={undefined}
  isTVSelectable={true}
  nativeID={undefined}
  onLayout={undefined}
  onResponderGrant={[Function]}
  onResponderMove={[Function]}
  onResponderRelease={[Function]}
  onResponderTerminate={[Function]}
  onResponderTerminationRequest={[Function]}
  onStartShouldSetResponder={[Function]}
  style={
    Array [
      Object {
        "backgroundColor": "transparent",
      },
      Array [
        Object {
          "overflow": "hidden",
        },
        Object {
          "backgroundColor": "rgba(0,0,0,0)",
          "borderRadius": 5,
        },
      ],
    ]
  }
  testID={undefined}
  tvParallaxProperties={undefined}
>
  <View
    style={
      Array [
        Object {
          "alignItems": "center",
          "flexDirection": "row",
          "justifyContent": "flex-start",
          "padding": 8,
        },
        Object {
          "backgroundColor": "rgba(0,0,0,0)",
          "borderRadius": 5,
        },
        undefined,
      ]
    }
  >
    <Text
      accessible={true}
      allowFontScaling={false}
      disabled={false}
      ellipsizeMode="tail"
      onPress={undefined}
      style={
        Array [
          Object {
            "color": "#777",
            "fontSize": 50,
          },
          Array [
            Object {
              "marginRight": 10,
            },
            Object {
              "marginLeft": 0,
              "marginRight": 0,
            },
          ],
          Object {
            "fontFamily": "Material Icons",
            "fontStyle": "normal",
            "fontWeight": "normal",
          },
        ]
      }
    >
      
    </Text>
  </View>
</View>
`;

exports[`Checkbox size stzling props should render an unchecked box if isChecked=false 1`] = `
<View
  accessibilityComponentType={undefined}
  accessibilityLabel={undefined}
  accessibilityTraits={undefined}
  accessible={true}
  hasTVPreferredFocus={undefined}
  hitSlop={undefined}
  isTVSelectable={true}
  nativeID={undefined}
  onLayout={undefined}
  onResponderGrant={[Function]}
  onResponderMove={[Function]}
  onResponderRelease={[Function]}
  onResponderTerminate={[Function]}
  onResponderTerminationRequest={[Function]}
  onStartShouldSetResponder={[Function]}
  style={
    Array [
      Object {
        "backgroundColor": "transparent",
      },
      Array [
        Object {
          "overflow": "hidden",
        },
        Object {
          "backgroundColor": "rgba(0,0,0,0)",
          "borderRadius": 5,
        },
      ],
    ]
  }
  testID={undefined}
  tvParallaxProperties={undefined}
>
  <View
    style={
      Array [
        Object {
          "alignItems": "center",
          "flexDirection": "row",
          "justifyContent": "flex-start",
          "padding": 8,
        },
        Object {
          "backgroundColor": "rgba(0,0,0,0)",
          "borderRadius": 5,
        },
        undefined,
      ]
    }
  >
    <Text
      accessible={true}
      allowFontScaling={false}
      disabled={false}
      ellipsizeMode="tail"
      onPress={undefined}
      style={
        Array [
          Object {
            "color": "#777",
            "fontSize": 30,
          },
          Array [
            Object {
              "marginRight": 10,
            },
            Object {
              "marginLeft": 0,
              "marginRight": 0,
            },
          ],
          Object {
            "fontFamily": "Material Icons",
            "fontStyle": "normal",
            "fontWeight": "normal",
          },
        ]
      }
    >
      
    </Text>
  </View>
</View>
`;

exports[`Checkbox size stzling props should render an unchecked box if isChecked=true 1`] = `
<View
  accessibilityComponentType={undefined}
  accessibilityLabel={undefined}
  accessibilityTraits={undefined}
  accessible={true}
  hasTVPreferredFocus={undefined}
  hitSlop={undefined}
  isTVSelectable={true}
  nativeID={undefined}
  onLayout={undefined}
  onResponderGrant={[Function]}
  onResponderMove={[Function]}
  onResponderRelease={[Function]}
  onResponderTerminate={[Function]}
  onResponderTerminationRequest={[Function]}
  onStartShouldSetResponder={[Function]}
  style={
    Array [
      Object {
        "backgroundColor": "transparent",
      },
      Array [
        Object {
          "overflow": "hidden",
        },
        Object {
          "backgroundColor": "rgba(0,0,0,0)",
          "borderRadius": 5,
        },
      ],
    ]
  }
  testID={undefined}
  tvParallaxProperties={undefined}
>
  <View
    style={
      Array [
        Object {
          "alignItems": "center",
          "flexDirection": "row",
          "justifyContent": "flex-start",
          "padding": 8,
        },
        Object {
          "backgroundColor": "rgba(0,0,0,0)",
          "borderRadius": 5,
        },
        undefined,
      ]
    }
  >
    <Text
      accessible={true}
      allowFontScaling={false}
      disabled={false}
      ellipsizeMode="tail"
      onPress={undefined}
      style={
        Array [
          Object {
            "color": "#777",
            "fontSize": 30,
          },
          Array [
            Object {
              "marginRight": 10,
            },
            Object {
              "marginLeft": 0,
              "marginRight": 0,
            },
          ],
          Object {
            "fontFamily": "Material Icons",
            "fontStyle": "normal",
            "fontWeight": "normal",
          },
        ]
      }
    >
      
    </Text>
  </View>
</View>
`;
